#!/bin/bash
#
# Short:    Run all known LogoutHooks
# Author:   Mark J Swift
# Version:  1.0.3
# Modified: 11-Apr-2017
#
# Called at logout by the LogoutHook hook as follows (as root):    
#   MasterLogoutHook <User>

# ---

# assume that all scripts are in a subdirectory off the main project directory
GLB_sv_ProjectDirPath="$(dirname $(dirname ${0}))"

# Include the CommonLib
. "${GLB_sv_ProjectDirPath}/inc/Common.sh"

# Exit if something went wrong unexpectedly
if test -z "${GLB_sv_ProjectName}"
then
  exit 90
fi

# ---

# Exit if not the root user
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Unable to run, try: sudo ${GLB_sv_ThisScriptName}"
  exit 91
fi

# ---

sv_LoggedInUserName="${1}"

# ---

if test -z "${sv_LoggedInUserName}"
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelWarn} "Hook was called without a user; that's odd"
  exit 0
fi

# ---

GLB_nf_logmessage ${GLB_iv_MsgLevelInfo} "Running for user '${sv_LoggedInUserName}'"

# ---

# Run all known LogoutHooks in background
if test -e "${GLB_sv_ProjectConfigDirPath}/LogoutHooks"
then
  while read sv_LogoutHookLinkName
  do
    # Get the filepath of the script that the hook link points to
    sv_LogoutHookFilePath="$(stat -f "%Y" "${GLB_sv_ProjectConfigDirPath}/LogoutHooks/${sv_LogoutHookLinkName}")"
    if test -z "${sv_LogoutHookFilePath}"
    then
      # The hook links to nowhere - so delete it
      rm -f "${GLB_sv_ProjectConfigDirPath}/LogoutHooks/${sv_LogoutHookLinkName}"
    else
      if ! test -e "${sv_LogoutHookFilePath}"
      then
        # The hook link is broken - so delete it
        rm -f "${GLB_sv_ProjectConfigDirPath}/LogoutHooks/${sv_LogoutHookLinkName}"
      else

        # The Hook link is OK - so run it
         GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Running LogoutHook '${sv_LogoutHookFilePath} ${sv_LoggedInUserName}'"
        "${sv_LogoutHookFilePath}" "${sv_LoggedInUserName}" &

      fi
    fi
  done < <(ls -1t "${GLB_sv_ProjectConfigDirPath}/LogoutHooks")
fi

# We dont want to quit until the background LogoutHooks are finished - or they might terminate early.
# We also dont want to wait around too long for LogoutHooks to finish - so give a maximum time to finish.

iv_DelayCount=0
while [ ${iv_DelayCount} -lt ${GLB_iv_MaxRunTimeSecs} ]
do
  if test -z "$(jobs -r)"
  then
    break
  fi

  # we don't want to hog the CPU - so lets sleep a while
  sleep 1
      
  iv_DelayCount=$((${iv_DelayCount}+1))
done

