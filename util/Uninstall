#!/bin/bash
#
# Short:    Uninstall Project (command-line)
# Author:   Mark J Swift
# Version:  1.0.3
# Modified: 11-Apr-2017
#
#
# Called as follows:    
#   sudo Uninstall [<root_dirpath>]

# ---

# assume that all scripts are in a subdirectory off the main project directory
GLB_sv_ProjectDirPath="$(dirname $(dirname ${0}))"

# Include the CommonLib
. "${GLB_sv_ProjectDirPath}/inc/Common.sh"

# Exit if something went wrong unexpectedly
if test -z "${GLB_sv_ProjectName}"
then
  exit 90
fi

# ---

# Exit if not the root user
if [ "${GLB_sv_ThisUserName}" != "root" ]
then
  GLB_nf_logmessage ${GLB_iv_MsgLevelErr} "Unable to run, try: sudo ${GLB_sv_ThisScriptName}"
  exit 91
fi

# ---

# Where we should install
sv_RootDirPath="${1}"

if [ "${sv_RootDirPath}" = "/" ]
then
  sv_RootDirPath=""
fi

# ---

if [ "${GLB_bv_ThisUserIsAdmin}" = "false" ]
then
  echo >&2 "ERROR: You must be an admin to run this software."
  exit 0
fi

# ---

if test -z "${sv_RootDirPath}"
then

  GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Uninstalling ${GLB_sv_ProjectName}."

  if test -n "$(launchctl list | grep -i "${GLB_sv_ProjectSignature}.CheckHooks")"
  then

    if test -f "${sv_RootDirPath}"/Library/LaunchDaemons/${GLB_sv_ProjectSignature}.CheckHooks.plist
    then
      launchctl unload "${sv_RootDirPath}"/Library/LaunchDaemons/${GLB_sv_ProjectSignature}.CheckHooks.plist
      sleep 1
    fi
  fi

  if test -n "$(launchctl list | grep -i "${GLB_sv_ProjectSignature}.CheckHooks")"
  then
    GLB_nf_logmessage ${GLB_iv_MsgLevelWarn} "You will need to reboot to completely uninstall ${GLB_sv_ProjectName}."
  fi
fi
  
# remove old LauncDaemon
if test -f "${sv_RootDirPath}"/Library/LaunchDaemons/${GLB_sv_ProjectSignature}.CheckHooks.plist
then
  rm -f "${sv_RootDirPath}"/Library/LaunchDaemons/${GLB_sv_ProjectSignature}.CheckHooks.plist
fi

# Remove old config
if test -z "${sv_RootDirPath}"
then
  sv_MasterLoginHookFilePath="/usr/local/${GLB_sv_ProjectName}/lib/MasterLoginHook"
  sv_CurrentLoginHookFilePath="$(defaults read com.apple.loginwindow LoginHook)"
  if [ "${sv_CurrentLoginHookFilePath}" = "${sv_MasterLoginHookFilePath}" ]
  then
    defaults write com.apple.loginwindow LoginHook ""

    # Check all login hooks, and re-instate the most recent
    if test -e "${GLB_sv_ProjectConfig}/LoginHooks"
    then
      while read sv_LoginHookLinkName
      do
        # Get the filepath of the script that the hook link points to
        sv_LoginHookFilePath="$(stat -f "%Y" "${GLB_sv_ProjectConfig}/LoginHooks/${sv_LoginHookLinkName}")"
        if test -n "${sv_LoginHookFilePath}"
        then
          if test -e "${sv_LoginHookFilePath}"
          then
            # The Hook link is OK - so re-instate it
            GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Restoring LoginHook '${sv_LoginHookFilePath}'"
            defaults write com.apple.loginwindow LoginHook "${sv_LoginHookFilePath}"
            break
          fi
        fi
      done < <(ls -1t "${GLB_sv_ProjectConfig}/LoginHooks")
    fi
  fi

  sv_MasterLogoutHookFilePath="/usr/local/${GLB_sv_ProjectName}/lib/MasterLogoutHook"

  sv_CurrentLogoutHookFilePath="$(defaults read com.apple.loginwindow LogoutHook)"
  if [ "${sv_CurrentLogoutHookFilePath}" = "${sv_MasterLogoutHookFilePath}" ]
  then
    defaults write com.apple.loginwindow LogoutHook ""

    # Check all logout hooks, and re-instate the most recent
    if test -e "${GLB_sv_ProjectConfig}/LogoutHooks"
    then
      while read sv_LogoutHookLinkName
      do
        # Get the filepath of the script that the hook link points to
        sv_LogoutHookFilePath="$(stat -f "%Y" "${GLB_sv_ProjectConfig}/LogoutHooks/${sv_LogoutHookLinkName}")"
        if test -n "${sv_LogoutHookFilePath}"
        then
          if test -e "${sv_LogoutHookFilePath}"
          then
           # The Hook link is OK - so re-instate it
           GLB_nf_logmessage ${GLB_iv_MsgLevelNotice} "Restoring LogoutHook '${sv_LogoutHookFilePath}'"
           defaults write com.apple.loginwindow LogoutHook "${sv_LogoutHookFilePath}"
          fi
        fi
      done < <(ls -1t "${GLB_sv_ProjectConfig}/LogoutHooks")
    fi

  fi

  # Remove the config files
  rm -fR "${GLB_sv_ProjectConfig}"
fi

# remove old install
if test -d "${sv_RootDirPath}"/usr/local/${GLB_sv_ProjectName}
then
  rm -fR "${sv_RootDirPath}"/usr/local/${GLB_sv_ProjectName}
fi
  
if test -z "${sv_RootDirPath}"
then
  pkgscripts 2>/dev/null --forget "${GLB_sv_ProjectSignature}"
else
  pkgscripts 2>/dev/null --forget "${GLB_sv_ProjectSignature}" --volume "${sv_RootDirPath}"
fi

exit 0
